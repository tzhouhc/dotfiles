#!/usr/bin/env zsh

source $HOME/.zsh/env/path.zsh

# Function to check if a file is binary
function is_binary() {
    local file="$1"
    [[ ! -s "$file" ]] && return 1
    file "$file" | grep -q "text" && return 1 || return 0
}

function find_related_files() {
    local base="$1"
    local dir=$(dirname "$base")
    local name=$(basename "$base")
    basef=$(readlink -f "$base")
    
    find "$dir" -maxdepth 1 -type f -name "${name}*" | while read -r file; do
        filef=$(readlink -f "$file")
        if [[ "$filef" != "$basef" ]] && ! is_binary "$file"; then
            echo "$file"
        fi
    done
}

# Main function that returns the selected filename
function smart_select() {
    local file="$1"
    
    [[ -z "$file" ]] && return 1
    
    # Initialize choices array with the original file
    local -a choices=()
    local should_prompt=false

    # Check if file exists and is binary, or doesn't exist
    if [[ -f "$file" ]] && is_binary "$file"; then
        choices+=("$file (binary)")
    elif [[ ! -f "$file" ]]; then
        choices+=("$file (new)")
    fi
    
    # Find related text files
    local related_files=($(find_related_files "$file"))
    choices=("${related_files[@]}" "${choices[@]}")
    if (( ${#choices} > 1 )); then
        should_prompt=true
    fi
    
    # If we should prompt, let user choose
    if $should_prompt; then
        local choice
        choice=$(printf "%s\n" "${choices[@]}" | gum choose --header "Select file:")
        echo "${choice% (*))}"  # Strip the (binary) or (new) suffix if present
    else
        # If file exists and is text, just return it
        echo "$file"
    fi
}

# Find the pane containing vim instance in current tmux window
function vimpane() {
  if [[ $TMUX != '' ]]; then
    tmux list-panes -F '#I:#P #{pane_current_command}' | grep nvim | cut -d' ' -f1  | cut -d':' -f2
  fi
}

# if tmux is running, then try to find running vim panel
# will probably fail if no nvim is running
# though this really should only be called from the above supervim cmd
function gotovim() {
  if [[ $TMUX != '' ]]; then
    vim_pane=$(vimpane)
    if [[ $vim_pane != '' ]]; then
      tmux select-pane -t $vim_pane && tmux send-keys Enter
      # the extra step is needed to avoid the hit-enter events due to low
      # cmdheight in nvim.
    else
      echo "Vim is not running in the current window."
      return 1
    fi
  fi
}

function smart_edit() {
  if type nvr >/dev/null 2>&1; then
    # vim internal-terminal mode
    if [[ $NVIM != '' ]]; then
      # reusing current (parent) nvim instance
      nvr $@
      return
    fi
    # determine tmux mode
    if [[ $TMUX != '' ]]; then
      window=$(tmux display-message -p '#I')
      expect_name="/tmp/nvimsocket_$window"
    else
      expect_name="/tmp/nvimsocket"
    fi
    if [[ $(vimpane) != '' ]]; then
      # no exec needed -- reusing existing nvim instance
      NVIM_LISTEN_ADDRESS=$expect_name nvr $@ && gotovim
    else
      # if we are creating a new server, make sure there's no leftover sockets
      # that might lock us out
      rm -f $expect_name
      # using exec because this creates a new neovim instance and it must replace
      # the zsh script for tmux to recognize it
      NVIM_LISTEN_ADDRESS=$expect_name exec nvim $@
    fi
  else
    # using exec because ditto
    exec nvim $@
  fi
}

if [ $# -eq 1 ]; then
  smart_edit $(smart_select $@)
else
  smart_edit $@
fi
